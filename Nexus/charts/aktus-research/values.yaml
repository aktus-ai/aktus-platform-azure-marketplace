aktusResearch:
  image: "{{ .Values.global.azure.images.aktusResearch.registry }}/{{ .Values.global.azure.images.aktusResearch.image }}:{{ .Values.global.azure.images.aktusResearch.tag }}"
  imagePullPolicy: Always
  port: 8080
  service:
    type: ClusterIP
    port: 8080
  
  auth:
    username: "guest"
    password: "guest"
  
  uvicorn:
    host: "0.0.0.0"
    port: "8080"
    logLevel: "debug"
    timeoutKeepAlive: "3600"
  
  # Application configuration
  app:
    experimental: "true"
    env: "research"
    enableLeaseDemo: "true"
  
  # Service endpoints
  endpoints:
    graphrag: "http://aktus-embedding:8080/graphrag/search"
    vectorDb: "http://aktus-embedding:8080"
    dbManager: "http://aktus-database:8080"
    redisBackend: "redis"
  
  anyscale:
    apiBase: "https://api.endpoints.anyscale.com/v1"
  
  modelInference:
    address: ""
  
  embeddingService:
    host: "aktus-embedding:8080"
  
  paths:
    docUpload: "/document_upload"
    docImage: "/doc_processing" 
    extractedData: "/extracted_data"
    contextPath: "/extracted_data/lease-abstraction/2025-leases/context.txt"
    leaseDataPath: "/extracted_data"
    leaseDataAbstractFolder: "abstract"
    leaseDataCashflowFolder: "cashflow"
  
  # Azure Blob Storage configuration
  storage:
    documentUpload:
      storageAccount: "{{ .Values.global.azure.storage.account }}"
      containerName: "{{ .Values.global.azure.storage.containers.upload }}"
      readOnly: false
    docProcessing:
      storageAccount: "{{ .Values.global.azure.storage.account }}"
      containerName: "{{ .Values.global.azure.storage.containers.processing }}"
      readOnly: false
    extractedData:
      storageAccount: "{{ .Values.global.azure.storage.account }}"
      containerName: "{{ .Values.global.azure.storage.containers.extracted }}"
      readOnly: false
  
  resources:
    requests:
      cpu: "4000m"
      memory: "16Gi"

healthcheck:
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 60
  failureThreshold: 20

serviceAccount:
  name: "nexus-primary-cluster-sa"

nodeSelector:
  agentpool: standardpool